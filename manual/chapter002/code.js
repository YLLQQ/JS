/**
 * 字符集为Unicode
 * 区分大小写
 * JavaScript会忽略程序中标识之间的空格，多数情况下会忽略换行符
 * JavaScript将换行符，回车符，杭分隔符，段分隔符识别为行结束符。回车符加换行符在一起被解析为一个单行结束符。
 */

/**
 * 直接量，程序中直接使用的数据值
 */

/**
 * 标识符，用来对变量和函数进行命名，或者用做JavaScript代码中某些循环语句中的跳转位置的标记
 * 标识符必须以字母、下划线或美元符号开始。后续的字符可以是字母、数字、下划线或美元符
 *
 * 出于可移植性和易于书写的考虑，通常我们只使用ASCII字母和数字来书写标识符。
 * 然而需要注意的是，JavaScript允许标识符中出现Unicode字符全集中的字母和数字。
 */

/**
 * JavaScript使用分号（;）将语句分开。
 * 缺少分隔符，一条语句的结束就称为下一条语句的开始，反之亦然。在JavaScript中，如果语句各自独占一行，通常可以省略语句之间的分号（程序结尾或右花括号之前的分号也可以省略）。
 * 需要注意的是，JavaScript并不是在所有换行处都填补分号；只有在缺少了分号就无法正确解析代码的时候，JavaScript才会填补分号。
 * 换句话讲，如果当前语句和随后的非空格字符不能当成一个整体来分析的话，JavaScript就在当前语句行结束处填补分号。
 *
 * 但有如下例外：1，如果涉及到关键字return，break或continue后紧跟着换行，JavaScript则会在换行处填补分号；
 * 2，涉及到“++”或“--”时 如果将其作为后缀表达式，它和表达式应当在同一行。否则，行尾处将填补分号，同时他们将作为下一行代码的前缀操作符并与之一起解析。
 */

/**
 * JavaScript中的数据类型分为两类：原始类型和对象类型
 * 原始类型包括：数字、字符串、布尔值、null（空）、undefined（未定义）
 * 对象类型，对象是属性的集合，每个属性都有“名/值对组成”。其中有一个特殊对象--全局对象（global object）
 * 通常情况下，对象是“命名值”的无序集合。但数组对象表示带编号的值的有序集合。
 * 另一种特殊对象，函数。函数是具有与它相关联的可执行代码的对象，通过调用函数来运行可执行代码，并返回运算结果。
 */